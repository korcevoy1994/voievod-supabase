/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function checkDatabaseData() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  console.log('=' .repeat(50));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤:');
    const { data: orders, error: ordersError } = await supabase
      .from('orders')
      .select('id, status, total_price, customer_email')
      .limit(5);
    
    if (ordersError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', ordersError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}`);
      orders.forEach((order, index) => {
        console.log(`  ${index + 1}. ID: ${order.id.substring(0, 8)}..., –°—Ç–∞—Ç—É—Å: ${order.status}, –°—É–º–º–∞: ${order.total_price}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏
    console.log('\nüí≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π (order_payments):');
    const { data: payments, error: paymentsError } = await supabase
      .from('order_payments')
      .select('id, order_id, status, amount, payment_provider')
      .limit(5);
    
    if (paymentsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:', paymentsError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${payments.length}`);
      payments.forEach((payment, index) => {
        console.log(`  ${index + 1}. ID: ${payment.id.substring(0, 8)}..., Order: ${payment.order_id.substring(0, 8)}..., –°—Ç–∞—Ç—É—Å: ${payment.status}, –°—É–º–º–∞: ${payment.amount}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å –∑–∞–∫–∞–∑–æ–≤ –∏ –ø–ª–∞—Ç–µ–∂–µ–π
    console.log('\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ –∑–∞–∫–∞–∑–æ–≤ –∏ –ø–ª–∞—Ç–µ–∂–µ–π:');
    const { data: ordersWithPayments, error: joinError } = await supabase
      .from('orders')
      .select(`
        id,
        status,
        total_price,
        order_payments(
          id,
          status,
          amount,
          payment_provider
        )
      `)
      .eq('status', 'paid')
      .limit(3);
    
    if (joinError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', joinError);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${ordersWithPayments.length}`);
      ordersWithPayments.forEach((order, index) => {
        console.log(`  ${index + 1}. –ó–∞–∫–∞–∑: ${order.id.substring(0, 8)}..., –°—Ç–∞—Ç—É—Å: ${order.status}`);
        if (order.order_payments && order.order_payments.length > 0) {
          order.order_payments.forEach((payment, pIndex) => {
            console.log(`     –ü–ª–∞—Ç–µ–∂ ${pIndex + 1}: ${payment.id.substring(0, 8)}..., –°—Ç–∞—Ç—É—Å: ${payment.status}, –°—É–º–º–∞: ${payment.amount}`);
          });
        } else {
          console.log('     ‚ö†Ô∏è  –ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
    console.log('\nüèóÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü:');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ order_payments
    const { data: tableCheck, error: tableError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .in('table_name', ['orders', 'order_payments', 'payments']);
    
    if (tableError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü:', tableError);
    } else {
      console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:');
      tableCheck.forEach(table => {
        console.log(`  - ${table.table_name}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
  
  console.log('\n' + '='.repeat(50));
  console.log('üèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

checkDatabaseData().catch(console.error);