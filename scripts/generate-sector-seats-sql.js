// –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL INSERT –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤ A, B, C
// –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ TypeScript —Ñ–∞–π–ª–æ–≤

import fs from 'fs';
import path from 'path';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ TypeScript —Ñ–∞–π–ª–∞
function extractSeatDataFromFile(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
  const arrayMatch = content.match(/export const \w+SeatData: SeatData\[\] = \[(.*?)\];/s);
  if (!arrayMatch) {
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–µ—Å—Ç –≤ —Ñ–∞–π–ª–µ ${filePath}`);
  }
  
  // –ü–∞—Ä—Å–∏–º –æ–±—ä–µ–∫—Ç—ã –º–µ—Å—Ç
  const arrayContent = arrayMatch[1];
  const seatMatches = arrayContent.match(/\{[\s\S]*?\}/g) || [];
  
  const seats = [];
  seatMatches.forEach(seatStr => {
    const idMatch = seatStr.match(/id: '([^']+)'/);
    const rowMatch = seatStr.match(/row: '([^']+)'/);
    const numberMatch = seatStr.match(/number: ([\d]+)/);
    const xMatch = seatStr.match(/x: ([\d.]+)/);
    const yMatch = seatStr.match(/y: ([\d.]+)/);
    
    if (idMatch && rowMatch && numberMatch && xMatch && yMatch) {
      seats.push({
        id: idMatch[1],
        row: rowMatch[1],
        number: parseInt(numberMatch[1]),
        x: parseFloat(xMatch[1]),
        y: parseFloat(yMatch[1])
      });
    }
  });
  
  return seats;
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
const zoneSectorASeatData = extractSeatDataFromFile('./src/data/zone-sector-a-seats.ts');
const zoneSectorBSeatData = extractSeatDataFromFile('./src/data/zone-sector-b-seats.ts');
const zoneSectorCSeatData = extractSeatDataFromFile('./src/data/zone-sector-c-seats.ts');

// –¶–µ–Ω—ã –¥–ª—è —Å–µ–∫—Ç–æ—Ä–æ–≤ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
const SECTOR_PRICES = {
  'A': 150.00,
  'B': 120.00,
  'C': 100.00
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL INSERT –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
function generateSectorSQL(sectorData, sectorName) {
  const price = SECTOR_PRICES[sectorName];
  const sqlStatements = [];
  
  sectorData.forEach((seat, index) => {
    const zone = sectorName;
    const row = seat.row;
    const number = seat.number;
    const x_coordinate = seat.x;
    const y_coordinate = seat.y;
    
    // –£–±–∏—Ä–∞–µ–º id –∏–∑ INSERT - –ø–æ–∑–≤–æ–ª—è–µ–º –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å UUID
    const sql = `INSERT INTO public.seats (zone, row, number, price, x_coordinate, y_coordinate) VALUES ('${zone}', '${row}', '${number}', ${price}, ${x_coordinate}, ${y_coordinate});`;
    sqlStatements.push(sql);
  });
  
  return sqlStatements;
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL –¥–ª—è –≤—Å–µ—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤
function generateAllSectorsSQL() {
  const allSQL = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  allSQL.push('-- SQL INSERT –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤ A, B, C');
  allSQL.push('-- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö TypeScript');
  allSQL.push('');
  
  // –°–µ–∫—Ç–æ—Ä A
  allSQL.push('-- –°–µ–∫—Ç–æ—Ä A');
  const sectorASQL = generateSectorSQL(zoneSectorASeatData, 'A');
  allSQL.push(...sectorASQL);
  allSQL.push('');
  
  // –°–µ–∫—Ç–æ—Ä B
  allSQL.push('-- –°–µ–∫—Ç–æ—Ä B');
  const sectorBSQL = generateSectorSQL(zoneSectorBSeatData, 'B');
  allSQL.push(...sectorBSQL);
  allSQL.push('');
  
  // –°–µ–∫—Ç–æ—Ä C
  allSQL.push('-- –°–µ–∫—Ç–æ—Ä C');
  const sectorCSQL = generateSectorSQL(zoneSectorCSeatData, 'C');
  allSQL.push(...sectorCSQL);
  allSQL.push('');
  
  return allSQL.join('\n');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  try {
    console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL INSERT –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–µ–∫—Ç–æ—Ä–æ–≤ A, B, C...');
    
    const sqlContent = generateAllSectorsSQL();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    const outputPath = './public/sector-seats-insert.sql';
    fs.writeFileSync(outputPath, sqlContent, 'utf8');
    
    console.log(`‚úÖ SQL —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputPath}`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –°–µ–∫—Ç–æ—Ä A: ${zoneSectorASeatData.length} –º–µ—Å—Ç`);
    console.log(`   - –°–µ–∫—Ç–æ—Ä B: ${zoneSectorBSeatData.length} –º–µ—Å—Ç`);
    console.log(`   - –°–µ–∫—Ç–æ—Ä C: ${zoneSectorCSeatData.length} –º–µ—Å—Ç`);
    console.log(`   - –í—Å–µ–≥–æ: ${zoneSectorASeatData.length + zoneSectorBSeatData.length + zoneSectorCSeatData.length} –º–µ—Å—Ç`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { generateAllSectorsSQL };