const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Missing Supabase configuration');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function addShortOrderNumber() {
  try {
    console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ short_order_number –≤ —Ç–∞–±–ª–∏—Ü—É orders...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ –ø–æ–ª–µ
    const { data: columns, error: checkError } = await supabase
      .from('information_schema.columns')
      .select('column_name')
      .eq('table_name', 'orders')
      .eq('column_name', 'short_order_number');
    
    if (checkError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
    }
    
    if (columns && columns.length > 0) {
      console.log('‚úÖ –ü–æ–ª–µ short_order_number —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    } else {
      console.log('üìù –ü–æ–ª–µ short_order_number –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ SQL');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã
    const { data: orders, error: ordersError } = await supabase
      .from('orders')
      .select('id, created_at')
      .limit(5);
    
    if (ordersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', ordersError);
      return;
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${orders?.length || 0} –∑–∞–∫–∞–∑–æ–≤`);
    
    if (orders && orders.length > 0) {
      console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–∫–∞–∑–æ–≤:');
      orders.forEach((order, index) => {
        const year = new Date(order.created_at).getFullYear();
        const shortNumber = `ORD-${year}-${String(1000 + index).padStart(4, '0')}`;
        console.log(`  ${order.id} -> ${shortNumber}`);
      });
    }
    
    console.log('\nüéØ –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è short_order_number –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ SQL –∫–æ–º–∞–Ω–¥—ã –≤ Supabase Dashboard:');
    console.log('\n-- 1. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ');
    console.log('ALTER TABLE orders ADD COLUMN IF NOT EXISTS short_order_number VARCHAR(20) UNIQUE;');
    
    console.log('\n-- 2. –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å');
    console.log('CREATE INDEX IF NOT EXISTS idx_orders_short_order_number ON orders(short_order_number);');
    
    console.log('\n-- 3. –°–æ–∑–¥–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
    console.log('CREATE SEQUENCE IF NOT EXISTS short_order_number_seq START 1000;');
    
    console.log('\n-- 4. –°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    console.log(`CREATE OR REPLACE FUNCTION generate_short_order_number()
RETURNS VARCHAR(20) AS $$
DECLARE
    short_number VARCHAR(20);
    counter INTEGER;
    max_attempts INTEGER := 100;
BEGIN
    FOR counter IN 1..max_attempts LOOP
        short_number := 'ORD-' || EXTRACT(YEAR FROM NOW()) || '-' || LPAD(nextval('short_order_number_seq')::TEXT, 4, '0');
        
        IF NOT EXISTS (SELECT 1 FROM orders WHERE short_order_number = short_number) THEN
            RETURN short_number;
        END IF;
    END LOOP;
    
    RETURN 'ORD-' || EXTRACT(YEAR FROM NOW()) || '-' || EXTRACT(EPOCH FROM NOW())::INTEGER;
END;
$$ LANGUAGE plpgsql;`);
    
    console.log('\n-- 5. –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä-—Ñ—É–Ω–∫—Ü–∏—é');
    console.log(`CREATE OR REPLACE FUNCTION set_short_order_number()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.short_order_number IS NULL THEN
        NEW.short_order_number := generate_short_order_number();
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;`);
    
    console.log('\n-- 6. –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä');
    console.log(`DROP TRIGGER IF EXISTS trigger_set_short_order_number ON orders;
CREATE TRIGGER trigger_set_short_order_number
    BEFORE INSERT ON orders
    FOR EACH ROW
    EXECUTE FUNCTION set_short_order_number();`);
    
    console.log('\n-- 7. –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã');
    console.log('UPDATE orders SET short_order_number = generate_short_order_number() WHERE short_order_number IS NULL;');
    
    console.log('\nüìù –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥, –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ ORD-YYYY-NNNN');
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

addShortOrderNumber();