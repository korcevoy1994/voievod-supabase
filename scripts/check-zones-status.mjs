#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Å—Ç –≤ –∑–æ–Ω–∞—Ö 201 –∏ 213
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkZonesStatus() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–µ—Å—Ç –≤ –∑–æ–Ω–∞—Ö 201 –∏ 213...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Å—Ç–∞ –≤ –∑–æ–Ω–∞—Ö 201 –∏ 213
    const { data: seats, error } = await supabase
      .from('seats')
      .select('id, zone, row, number, status')
      .in('zone', ['201', '213'])
      .order('zone')
      .order('row')
      .order('number');

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      return;
    }

    if (!seats || seats.length === 0) {
      console.log('‚ÑπÔ∏è –ú–µ—Å—Ç–∞ –≤ –∑–æ–Ω–∞—Ö 201 –∏ 213 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    console.log(`üìä –í—Å–µ–≥–æ –º–µ—Å—Ç –Ω–∞–π–¥–µ–Ω–æ: ${seats.length}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∑–æ–Ω–∞–º –∏ —Å—Ç–∞—Ç—É—Å–∞–º
    const stats = seats.reduce((acc, seat) => {
      if (!acc[seat.zone]) {
        acc[seat.zone] = {};
      }
      if (!acc[seat.zone][seat.status]) {
        acc[seat.zone][seat.status] = 0;
      }
      acc[seat.zone][seat.status]++;
      return acc;
    }, {});

    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–æ–Ω–∞–º:');
    Object.entries(stats).forEach(([zone, statuses]) => {
      console.log(`\nüéØ –ó–æ–Ω–∞ ${zone}:`);
      Object.entries(statuses).forEach(([status, count]) => {
        const emoji = {
          'available': 'üü¢',
          'blocked': 'üî¥',
          'reserved': 'üü°',
          'sold': '‚ö´',
          'unavailable': '‚ö™'
        }[status] || '‚ùì';
        console.log(`   ${emoji} ${status}: ${count} –º–µ—Å—Ç`);
      });
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    console.log('\nüìù –ü—Ä–∏–º–µ—Ä—ã –º–µ—Å—Ç:');
    ['201', '213'].forEach(zone => {
      const zoneSeats = seats.filter(s => s.zone === zone).slice(0, 5);
      if (zoneSeats.length > 0) {
        console.log(`\n   –ó–æ–Ω–∞ ${zone}:`);
        zoneSeats.forEach(seat => {
          console.log(`     –†—è–¥ ${seat.row}, –ú–µ—Å—Ç–æ ${seat.number}: ${seat.status}`);
        });
        if (seats.filter(s => s.zone === zone).length > 5) {
          console.log(`     ... –∏ –µ—â–µ ${seats.filter(s => s.zone === zone).length - 5} –º–µ—Å—Ç`);
        }
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
checkZonesStatus().then(() => {
  console.log('\nüèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}).catch((error) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});