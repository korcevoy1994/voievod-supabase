import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const CWD = process.cwd();

// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –º–µ—Å—Ç–∞—Ö
const DATA_DIR = path.join(CWD, 'src/data');
const OUTPUT_FILE = path.join(CWD, 'supabase-seats-export.sql');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–∞—Ö –∏–∑ TypeScript —Ñ–∞–π–ª–∞
function extractSeatDataFromFile(content) {
  // –ò—â–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–∞—Ö
  const match = content.match(/export const zone\d+SeatData: SeatData\[\] = \[([\s\S]*?)\];/);
  if (!match) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–∞—Ö –≤ —Ñ–∞–π–ª–µ');
  }

  const seatDataString = match[1];
  const seats = [];

  // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥–æ–µ –º–µ—Å—Ç–æ
  const seatMatches = seatDataString.matchAll(/\{\s*id:\s*'([^']+)',\s*row:\s*'([^']+)',\s*number:\s*'([^']+)',\s*x:\s*(\d+),\s*y:\s*(\d+),\s*status:\s*'([^']+)',\s*fill:\s*'([^']+)'\s*\}/g);
  
  for (const seatMatch of seatMatches) {
    const [, id, row, number, x, y, status, fill] = seatMatch;
    seats.push({
      id,
      row,
      number,
      x: parseInt(x),
      y: parseInt(y),
      status,
      fill
    });
  }

  return seats;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL INSERT –∑–∞–ø—Ä–æ—Å–æ–≤
function generateSeatInsertSQL(seats, zoneId, eventId = '550e8400-e29b-41d4-a716-446655440000') {
  if (seats.length === 0) {
    return '';
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ row+number –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
  const usedCombinations = new Set();
  
  const values = seats.map(seat => {
    let uniqueRow = seat.row;
    let uniqueNumber = seat.number;
    let combination = `${uniqueRow}-${uniqueNumber}`;
    
    // –ï—Å–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é
    if (usedCombinations.has(combination)) {
      let counter = 1;
      do {
        // –î–ª—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –º–µ—Å—Ç –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –∫ –Ω–æ–º–µ—Ä—É
        uniqueNumber = `${seat.number}_${counter}`;
        combination = `${uniqueRow}-${uniqueNumber}`;
        counter++;
      } while (usedCombinations.has(combination));
    }
    
    usedCombinations.add(combination);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—Ç–∞
    const seatUuid = `uuid_generate_v4()`;
    return `(${seatUuid}, '${eventId}', '${zoneId}', '${uniqueRow}', '${uniqueNumber}', NULL, FALSE, '${seat.status}', ${seat.x}, ${seat.y})`;
  }).join(',\n  ');

  return `-- –ú–µ—Å—Ç–∞ –¥–ª—è –∑–æ–Ω—ã ${zoneId}\nINSERT INTO seats (id, event_id, zone, row, number, price, custom_price, status, x_coordinate, y_coordinate) VALUES\n  ${values};\n\n`;
}

async function main() {
  try {
    console.log('–ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–∞—Ö –≤ Supabase...');
    
    // –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data
    const files = await fs.readdir(DATA_DIR);
    const seatFiles = files.filter(file => file.startsWith('zone-') && file.endsWith('-seats.ts'));
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${seatFiles.length} —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –º–µ—Å—Ç–∞—Ö:`);
    seatFiles.forEach(file => console.log(`  - ${file}`));
    
    let allSQL = `-- –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–µ—Å—Ç –≤ Supabase\n-- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–º export-seats-to-supabase.mjs\n-- –î–∞—Ç–∞: ${new Date().toISOString()}\n\n`;
    
    let totalSeats = 0;
    
    for (const file of seatFiles) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–æ–Ω—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, zone-201-seats.ts -> 201)
      const zoneIdMatch = file.match(/zone-(\d+)-seats\.ts/);
      if (!zoneIdMatch) {
        console.warn(`–ü—Ä–æ–ø—É—Å–∫–∞—é —Ñ–∞–π–ª —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∏–º–µ–Ω–∏: ${file}`);
        continue;
      }
      
      const zoneId = parseInt(zoneIdMatch[1]);
      const filePath = path.join(DATA_DIR, file);
      
      console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–æ–Ω—É ${zoneId}...`);
      
      try {
        const content = await fs.readFile(filePath, 'utf-8');
        const seats = extractSeatDataFromFile(content);
        
        console.log(`  –ù–∞–π–¥–µ–Ω–æ ${seats.length} –º–µ—Å—Ç`);
        totalSeats += seats.length;
        
        const sql = generateSeatInsertSQL(seats, zoneId);
        allSQL += sql;
        
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${file}:`, error.message);
      }
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º SQL –≤ —Ñ–∞–π–ª
    await fs.writeFile(OUTPUT_FILE, allSQL);
    
    console.log(`\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!`);
    console.log(`üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–µ—Å—Ç: ${totalSeats}`);
    console.log(`üìÑ SQL —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${OUTPUT_FILE}`);
    console.log(`\nüöÄ –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ Supabase –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:`);
    console.log(`   1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase SQL Editor`);
    console.log(`   2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ${path.basename(OUTPUT_FILE)}`);
    console.log(`   3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:', error);
    process.exit(1);
  }
}

main();