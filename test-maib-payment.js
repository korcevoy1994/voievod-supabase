async function testMaibPayment() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MAIB –ø–ª–∞—Ç–µ–∂–∞...');
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –Ω–∞–ª–∏—á–Ω—ã–º–∏
    const orderData = {
      userId: '550e8400-e29b-41d4-a716-446655440001', // –ù–æ–≤—ã–π UUID –¥–ª—è —Ç–µ—Å—Ç–∞
      customerInfo: {
        firstName: 'Test',
        lastName: 'MAIB',
        email: 'test.maib.new@example.com',
        phone: '+373123456789'
      },
      seats: [{
        id: '201-A-01',
        zone: '201',
        row: 'A',
        number: '01',
        price: 100
      }],
      generalAccess: [],
      totalPrice: 100,
      totalTickets: 1,
      paymentMethod: 'card' // –£–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
    };

    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –∫–∞—Ä—Ç–æ–π...');
    const orderResponse = await fetch('http://localhost:3001/api/orders', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-session-id': 'test-session-maib'
      },
      body: JSON.stringify(orderData)
    });

    if (!orderResponse.ok) {
      const errorData = await orderResponse.json();
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${errorData.error}`);
    }

    const orderResult = await orderResponse.json();
    console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', orderResult.orderId);

    // –¢–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å MAIB –ø–ª–∞—Ç–µ–∂
    console.log('üí≥ –°–æ–∑–¥–∞–Ω–∏–µ MAIB –ø–ª–∞—Ç–µ–∂–∞...');
    const paymentResponse = await fetch(`http://localhost:3001/api/orders/${orderResult.orderId}/payment`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-session-id': 'test-session-maib'
      },
      body: JSON.stringify({
        paymentMethod: 'card',
        paymentProvider: 'maib',
        language: 'ro'
      })
    });

    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ MAIB:', paymentResponse.status);
    
    if (!paymentResponse.ok) {
      const errorData = await paymentResponse.json();
      console.error('‚ùå –û—à–∏–±–∫–∞ MAIB –ø–ª–∞—Ç–µ–∂–∞:', errorData);
      return;
    }

    const paymentResult = await paymentResponse.json();
    console.log('‚úÖ MAIB –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω:', paymentResult);
    
    if (paymentResult.payUrl) {
      console.log('üîó URL –¥–ª—è –æ–ø–ª–∞—Ç—ã:', paymentResult.payUrl);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MAIB:', error.message);
  }
}

testMaibPayment();