/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
 */

const BASE_URL = 'http://localhost:3001';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });
    
    const data = await response.json();
    
    return {
      ok: response.ok,
      status: response.status,
      data
    };
  } catch (error) {
    console.error('Request failed:', error);
    return {
      ok: false,
      error: error.message
    };
  }
}

// –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
async function testGetOrders() {
  console.log('\nüß™ –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤');
  
  const result = await makeRequest(`${BASE_URL}/api/admin/orders?page=1&limit=5`);
  
  if (result.ok) {
    console.log('‚úÖ –ó–∞–∫–∞–∑—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${result.data.orders.length}`);
    
    // –ù–∞–π–¥–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    const paidOrder = result.data.orders.find(order => order.status === 'paid');
    
    if (paidOrder) {
      console.log(`üí≥ –ù–∞–π–¥–µ–Ω –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${paidOrder.id}`);
      return paidOrder;
    } else {
      console.log('‚ö†Ô∏è  –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      // –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      if (result.data.orders.length > 0) {
        console.log(`üìã –ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑: ${result.data.orders[0].id} (—Å—Ç–∞—Ç—É—Å: ${result.data.orders[0].status})`);
        return result.data.orders[0];
      }
    }
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', result.data?.error || result.error);
  }
  
  return null;
}

// –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
async function testRefund(order) {
  if (!order) {
    console.log('\n‚ö†Ô∏è  –¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω - –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–∫–∞–∑–∞');
    return;
  }
  
  console.log('\nüß™ –¢–µ—Å—Ç 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –≤–æ–∑–≤—Ä–∞—Ç–∞');
  console.log(`üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞: ${order.id}`);
  
  // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –æ–ø–ª–∞—á–µ–Ω, –ø–æ–∫–∞–∂–µ–º —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç
  if (order.status !== 'paid') {
    console.log(`‚ö†Ô∏è  –ó–∞–∫–∞–∑ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '${order.status}', –∞ –Ω–µ 'paid'`);
    console.log('üìù –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...');
  }
  
  const result = await makeRequest(`${BASE_URL}/api/admin/refunds`, {
    method: 'POST',
    body: JSON.stringify({
      orderId: order.id,
      reason: '–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ API'
    })
  });
  
  if (result.ok) {
    console.log('‚úÖ –í–æ–∑–≤—Ä–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result.data, null, 2));
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:', result.data?.error || result.error);
    console.log('üìä –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(result.data, null, 2));
  }
}

// –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
async function testGetRefunds() {
  console.log('\nüß™ –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤');
  
  const result = await makeRequest(`${BASE_URL}/api/admin/refunds?page=1&limit=10`);
  
  if (result.ok) {
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤: ${result.data.refunds.length}`);
    
    if (result.data.refunds.length > 0) {
      console.log('üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç—ã:');
      result.data.refunds.slice(0, 3).forEach((refund, index) => {
        console.log(`  ${index + 1}. –ó–∞–∫–∞–∑: ${refund.order_id}, –°—É–º–º–∞: ${refund.amount}, –°—Ç–∞—Ç—É—Å: ${refund.status}`);
      });
    }
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤:', result.data?.error || result.error);
  }
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ MAIB –∫–ª–∏–µ–Ω—Ç–∞
async function testMaibConnection() {
  console.log('\nüß™ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MAIB');
  
  // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const requiredEnvVars = ['MAIB_PROJECT_ID', 'MAIB_PROJECT_SECRET', 'MAIB_SIGNATURE_KEY'];
  const missingVars = [];
  
  requiredEnvVars.forEach(varName => {
    if (!process.env[varName]) {
      missingVars.push(varName);
    }
  });
  
  if (missingVars.length > 0) {
    console.log('‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è MAIB:');
    missingVars.forEach(varName => {
      console.log(`   - ${varName}`);
    });
    console.log('üí° –í–æ–∑–≤—Ä–∞—Ç—ã —á–µ—Ä–µ–∑ MAIB –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —ç—Ç–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö');
  } else {
    console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è MAIB –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤');
  console.log('=' .repeat(50));
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ MAIB
  await testMaibConnection();
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
  const testOrder = await testGetOrders();
  
  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
  await testRefund(testOrder);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
  await testGetRefunds();
  
  console.log('\n' + '='.repeat(50));
  console.log('üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  console.log('\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('   1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –µ—Å—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
  console.log('   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è MAIB');
  console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∫–∏');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (typeof window === 'undefined') {
  // Node.js environment
  const { fetch } = require('undici');
  global.fetch = fetch;
  runTests().catch(console.error);
} else {
  // Browser environment
  runTests().catch(console.error);
}