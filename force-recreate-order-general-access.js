require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase credentials');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function forceRecreateTable() {
  console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã order_general_access...');
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º —Ç–∞–±–ª–∏—Ü—É
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã...');
    const dropResult = await supabase.rpc('exec_sql', {
      query: 'DROP TABLE IF EXISTS order_general_access CASCADE;'
    });
    
    if (dropResult.error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç):', dropResult.error.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞');
    }
    
    // –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–Ω–æ–≤–æ
    console.log('üî® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã...');
    const createSQL = `
      CREATE TABLE order_general_access (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        order_id UUID NOT NULL,
        ticket_name VARCHAR(255) NOT NULL DEFAULT 'General Access',
        quantity INTEGER NOT NULL,
        price DECIMAL(10,2) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
      
      -- –í–∫–ª—é—á–∞–µ–º RLS
      ALTER TABLE order_general_access ENABLE ROW LEVEL SECURITY;
      
      -- –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É
      CREATE POLICY "Service role has full access to order_general_access" ON order_general_access
        FOR ALL USING (auth.role() = 'service_role');
      
      -- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
      CREATE INDEX IF NOT EXISTS idx_order_general_access_order_id ON order_general_access(order_id);
    `;
    
    const createResult = await supabase.rpc('exec_sql', {
      query: createSQL
    });
    
    if (createResult.error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', createResult.error);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã...');
      
      const commands = [
        `CREATE TABLE order_general_access (
          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
          order_id UUID NOT NULL,
          ticket_name VARCHAR(255) NOT NULL DEFAULT 'General Access',
          quantity INTEGER NOT NULL,
          price DECIMAL(10,2) NOT NULL,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );`,
        `ALTER TABLE order_general_access ENABLE ROW LEVEL SECURITY;`,
        `CREATE POLICY "Service role has full access to order_general_access" ON order_general_access FOR ALL USING (auth.role() = 'service_role');`,
        `CREATE INDEX IF NOT EXISTS idx_order_general_access_order_id ON order_general_access(order_id);`
      ];
      
      for (const cmd of commands) {
        const result = await supabase.rpc('exec_sql', { query: cmd });
        if (result.error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã:', cmd, result.error);
        } else {
          console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:', cmd.substring(0, 50) + '...');
        }
      }
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å—Ç–∞–≤–∫—É
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã...');
    const testOrderId = '00000000-0000-0000-0000-000000000000';
    
    const { data: insertData, error: insertError } = await supabase
      .from('order_general_access')
      .insert({
        order_id: testOrderId,
        ticket_name: 'Test Ticket',
        price: 100.00,
        quantity: 1
      })
      .select();
    
    if (insertError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–µ:', insertError);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞:', insertData);
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await supabase
        .from('order_general_access')
        .delete()
        .eq('order_id', testOrderId);
      console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

forceRecreateTable();