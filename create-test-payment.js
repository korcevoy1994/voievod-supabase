/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function createTestPayment() {
  console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤');
  console.log('=' .repeat(50));
  
  try {
    // –ù–∞–π–¥–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –±–µ–∑ –ø–ª–∞—Ç–µ–∂–∞
    const { data: orders, error: ordersError } = await supabase
      .from('orders')
      .select(`
        id,
        status,
        total_price,
        customer_email,
        order_payments(id)
      `)
      .eq('status', 'paid');
    
    if (ordersError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', ordersError);
      return;
    }
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${orders.length}`);
    
    // –ù–∞–π–¥–µ–º –∑–∞–∫–∞–∑ –±–µ–∑ –ø–ª–∞—Ç–µ–∂–∞
    const orderWithoutPayment = orders.find(order => 
      !order.order_payments || order.order_payments.length === 0
    );
    
    if (!orderWithoutPayment) {
      console.log('‚ö†Ô∏è  –í—Å–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —É–∂–µ –∏–º–µ—é—Ç –ø–ª–∞—Ç–µ–∂–∏');
      
      // –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ —Å –ø–ª–∞—Ç–µ–∂–æ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const orderWithPayment = orders.find(order => 
        order.order_payments && order.order_payments.length > 0
      );
      
      if (orderWithPayment) {
        console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ —Å –ø–ª–∞—Ç–µ–∂–æ–º: ${orderWithPayment.id}`);
        return orderWithPayment;
      }
      
      return null;
    }
    
    console.log(`üéØ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∑–∞–∫–∞–∑–∞: ${orderWithoutPayment.id}`);
    console.log(`üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${orderWithoutPayment.total_price}`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
    const paymentData = {
      order_id: orderWithoutPayment.id,
      amount: orderWithoutPayment.total_price,
      payment_method: 'card',
      payment_provider: 'maib',
      provider_payment_id: `TEST_${Date.now()}`, // –¢–µ—Å—Ç–æ–≤—ã–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      status: 'completed',
      provider_data: {
        test_payment: true,
        created_for_refund_testing: true,
        original_amount: orderWithoutPayment.total_price
      },
      completed_at: new Date().toISOString(),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    const { data: payment, error: paymentError } = await supabase
      .from('order_payments')
      .insert(paymentData)
      .select()
      .single();
    
    if (paymentError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', paymentError);
      return null;
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üí≥ ID –ø–ª–∞—Ç–µ–∂–∞: ${payment.id}`);
    console.log(`üîó ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ MAIB: ${payment.provider_payment_id}`);
    
    return {
      order: orderWithoutPayment,
      payment: payment
    };
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
    return null;
  }
}

async function testRefundWithRealData() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
  
  const testData = await createTestPayment();
  
  if (!testData) {
    console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
    return;
  }
  
  const { order, payment } = testData;
  
  console.log('\nüöÄ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–∑–≤—Ä–∞—Ç...');
  
  try {
    const response = await fetch('http://localhost:3001/api/admin/refunds', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        orderId: order.id,
        reason: '–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç'
      })
    });
    
    const result = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ –í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result, null, 2));
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      const { data: updatedOrder } = await supabase
        .from('orders')
        .select('id, status')
        .eq('id', order.id)
        .single();
      
      if (updatedOrder) {
        console.log(`üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ${updatedOrder.status}`);
      }
      
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:', result.error);
      console.log('üìä –î–µ—Ç–∞–ª–∏:', JSON.stringify(result, null, 2));
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:', error.message);
  }
}

async function main() {
  await testRefundWithRealData();
  
  console.log('\n' + '='.repeat(50));
  console.log('üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  console.log('\nüí° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
  console.log('   ‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  console.log('   ‚úÖ API –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
  console.log('   ‚úÖ –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è');
  console.log('   ‚ö†Ô∏è  MAIB –≤–æ–∑–≤—Ä–∞—Ç—ã —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

main().catch(console.error);