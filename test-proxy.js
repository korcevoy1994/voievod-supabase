const { HttpsProxyAgent } = require('https-proxy-agent');
const https = require('https');
const http = require('http');

// –ü–æ–ª—É—á–∞–µ–º FIXIE_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const fixieUrl = process.env.FIXIE_URL;

if (!fixieUrl) {
  console.error('‚ùå FIXIE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Fixie –ø—Ä–æ–∫—Å–∏...');
console.log('üì° –ü—Ä–æ–∫—Å–∏ URL:', fixieUrl.replace(/\/\/([^:]+):([^@]+)@/, '//***:***@'));

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∞–≥–µ–Ω—Ç
const agent = new HttpsProxyAgent(fixieUrl);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ HTTPS
function getIpAddressHttps(useProxy = false) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.ipify.org',
      port: 443,
      path: '/',
      method: 'GET',
      agent: useProxy ? agent : undefined
    };

    const req = https.request(options, (res) => {
      let data = '';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
      if (res.statusCode !== 200) {
        reject(new Error(`HTTP ${res.statusCode}: ${res.statusMessage}`));
        return;
      }
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        resolve(data.trim());
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.setTimeout(10000, () => {
      req.destroy();
      reject(new Error('Timeout'));
    });

    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ HTTP
function getIpAddressHttp(useProxy = false) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.ipify.org',
      port: 80,
      path: '/',
      method: 'GET',
      agent: useProxy ? agent : undefined
    };

    const req = http.request(options, (res) => {
      let data = '';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
      if (res.statusCode !== 200) {
        reject(new Error(`HTTP ${res.statusCode}: ${res.statusMessage}`));
        return;
      }
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        resolve(data.trim());
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.setTimeout(10000, () => {
      req.destroy();
      reject(new Error('Timeout'));
    });

    req.end();
  });
}

async function testProxy() {
  try {
    console.log('\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ IP –±–µ–∑ –ø—Ä–æ–∫—Å–∏ (HTTPS)...');
    const directIpHttps = await getIpAddressHttps(false);
    console.log('üåê –ü—Ä—è–º–æ–π IP (HTTPS):', directIpHttps);

    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ IP —á–µ—Ä–µ–∑ Fixie –ø—Ä–æ–∫—Å–∏ (HTTPS)...');
    try {
      const proxyIpHttps = await getIpAddressHttps(true);
      console.log('üîí IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ (HTTPS):', proxyIpHttps);
      
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã HTTPS:');
      if (directIpHttps !== proxyIpHttps) {
        console.log('‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ HTTPS! IP –∞–¥—Ä–µ—Å–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è.');
        console.log('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP –æ—Ç Fixie:', proxyIpHttps);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ IP –æ–¥–Ω–æ–º—É –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö Fixie
        const expectedIps = ['54.217.142.99', '54.195.3.54'];
        if (expectedIps.includes(proxyIpHttps)) {
          console.log('‚úÖ IP —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö IP Fixie');
        } else {
          console.log('‚ö†Ô∏è  IP –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º IP Fixie');
          console.log('   –û–∂–∏–¥–∞–µ–º—ã–µ IP:', expectedIps.join(', '));
        }
      } else {
        console.log('‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ HTTPS! IP –∞–¥—Ä–µ—Å–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ.');
      }
    } catch (httpsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ HTTPS –ø—Ä–æ–∫—Å–∏:', httpsError.message);
      
      console.log('\n3Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º HTTP...');
      try {
        const directIpHttp = await getIpAddressHttp(false);
        console.log('üåê –ü—Ä—è–º–æ–π IP (HTTP):', directIpHttp);
        
        const proxyIpHttp = await getIpAddressHttp(true);
        console.log('üîí IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ (HTTP):', proxyIpHttp);
        
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã HTTP:');
        if (directIpHttp !== proxyIpHttp) {
          console.log('‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ HTTP! IP –∞–¥—Ä–µ—Å–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è.');
          console.log('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP –æ—Ç Fixie:', proxyIpHttp);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ IP –æ–¥–Ω–æ–º—É –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö Fixie
          const expectedIps = ['54.217.142.99', '54.195.3.54'];
          if (expectedIps.includes(proxyIpHttp)) {
            console.log('‚úÖ IP —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö IP Fixie');
          } else {
            console.log('‚ö†Ô∏è  IP –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º IP Fixie');
            console.log('   –û–∂–∏–¥–∞–µ–º—ã–µ IP:', expectedIps.join(', '));
          }
        } else {
          console.log('‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ HTTP! IP –∞–¥—Ä–µ—Å–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ.');
        }
      } catch (httpError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–æ–∫—Å–∏:', httpError.message);
      }
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testProxy();