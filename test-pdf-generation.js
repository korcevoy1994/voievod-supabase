const { createClient } = require('@supabase/supabase-js');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'your-anon-key';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testPDFGeneration() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –±–∏–ª–µ—Ç–∞–º–∏...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'paid'
    const { data: orders, error: ordersError } = await supabase
      .from('orders')
      .select('id, customer_first_name, customer_last_name, status')
      .eq('status', 'paid')
      .limit(5);
    
    if (ordersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', ordersError);
      return;
    }
    
    if (!orders || orders.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "paid"');
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤:`);
    orders.forEach((order, index) => {
      console.log(`  ${index + 1}. ${order.id} - ${order.customer_first_name} ${order.customer_last_name}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–ª–µ—Ç—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    const testOrder = orders[0];
    console.log(`\nüé´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${testOrder.id}...`);
    
    const { data: tickets, error: ticketsError } = await supabase
      .from('tickets')
      .select(`
        id,
        ticket_number,
        qr_code,
        seat_id,
        metadata,
        order_id
      `)
      .eq('order_id', testOrder.id);
    
    if (ticketsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤:', ticketsError);
      return;
    }
    
    if (!tickets || tickets.length === 0) {
      console.log('‚ö†Ô∏è –ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞');
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tickets.length} –±–∏–ª–µ—Ç–æ–≤:`);
    tickets.forEach((ticket, index) => {
      console.log(`  ${index + 1}. ${ticket.ticket_number}`);
      console.log(`     QR –∫–æ–¥: ${ticket.qr_code ? '–ï—Å—Ç—å' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      console.log(`     –ú–µ—Å—Ç–æ: ${ticket.seat_id ? '–î–∞' : '–û–±—â–∏–π –¥–æ—Å—Ç—É–ø'}`);
      if (ticket.qr_code) {
        try {
          const qrData = typeof ticket.qr_code === 'string' ? JSON.parse(ticket.qr_code) : ticket.qr_code;
          console.log(`     QR –¥–∞–Ω–Ω—ã–µ: ticket_id=${qrData.ticket_id}, ticket_number=${qrData.ticket_number}`);
        } catch (e) {
          console.log(`     QR –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(ticket.qr_code).substring(0, 50)}...`);
        }
      }
    });
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìù –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
    console.log(`   GET /api/tickets/pdf?orderId=${testOrder.id}`);
    console.log(`   GET /api/tickets/pdf?orderId=${testOrder.id}&ticketIndex=1`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testPDFGeneration();