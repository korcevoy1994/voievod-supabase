const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∫–æ–º–∞–Ω–¥—É
 */
async function executeSql(command, description) {
  try {
    console.log(`üìÑ ${description}...`)
    
    const { data, error } = await supabase.rpc('exec_sql', { sql_query: command })
    
    if (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`)
      return false
    }
    
    console.log(`‚úÖ ${description} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`)
    return true
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ${description}:`, error.message)
    return false
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ constraint –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –º–µ—Å—Ç\n')
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...')
    const { data, error } = await supabase.from('seats').select('id').limit(1)
    
    if (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`)
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ\n')
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π constraint
    const dropSuccess = await executeSql(
      'ALTER TABLE seats DROP CONSTRAINT IF EXISTS seats_status_check;',
      '–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ constraint'
    )
    
    if (!dropSuccess) {
      console.log('‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –≤–æ–∑–º–æ–∂–Ω–æ constraint –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª')
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π constraint
    const addSuccess = await executeSql(
      "ALTER TABLE seats ADD CONSTRAINT seats_status_check CHECK (status IN ('available', 'reserved', 'sold', 'blocked', 'unavailable'));",
      '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ constraint —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π \'unavailable\''
    )
    
    if (addSuccess) {
      console.log('\nüéâ Constraint —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
      console.log('–¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å—Ç–∞—Ç—É—Å—ã: available, reserved, sold, blocked, unavailable')
    } else {
      console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å constraint')
      console.log('\nüìã –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é –≤ SQL Editor Supabase:')
      console.log('1. ALTER TABLE seats DROP CONSTRAINT IF EXISTS seats_status_check;')
      console.log('2. ALTER TABLE seats ADD CONSTRAINT seats_status_check CHECK (status IN (\'available\', \'reserved\', \'sold\', \'blocked\', \'unavailable\'));')
    }
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message)
    console.log('\nüìã –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é –≤ SQL Editor Supabase:')
    console.log('1. ALTER TABLE seats DROP CONSTRAINT IF EXISTS seats_status_check;')
    console.log('2. ALTER TABLE seats ADD CONSTRAINT seats_status_check CHECK (status IN (\'available\', \'reserved\', \'sold\', \'blocked\', \'unavailable\'));')
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main()
}

module.exports = { executeSql }