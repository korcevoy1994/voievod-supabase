import { NextRequest, NextResponse } from 'next/server'
import { withProtectedAccess, withPublicAccess, validateRequestData, sanitizeInput } from '@/middleware/sessionMiddleware'
import { SecureSessionManager } from '@/lib/secureSessionManager'
import { createSupabaseServerClient } from '@/lib/supabase-server'

interface OrderSeat {
  id: string // –¢–µ–ø–µ—Ä—å –∫–æ—Ä–æ—Ç–∫–∏–π 8-—Å–∏–º–≤–æ–ª—å–Ω—ã–π ID
  zone: string
  row: string
  number: string
  price: number
}

interface OrderGeneralAccess {
  id: string // –¢–µ–ø–µ—Ä—å –∫–æ—Ä–æ—Ç–∫–∏–π 8-—Å–∏–º–≤–æ–ª—å–Ω—ã–π ID
  name: string
  price: number
  quantity: number
}

interface CreateOrderRequest {
  userId: string
  customerInfo: {
    firstName: string
    lastName: string
    email: string
    phone: string
  }
  seats: OrderSeat[]
  generalAccess: OrderGeneralAccess[]
  totalPrice: number
  totalTickets: number
  paymentMethod: string
}

export const POST = withPublicAccess(async (request: NextRequest) => {
  try {
    console.log('üîÑ POST /api/orders - –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞')
    const supabase = createSupabaseServerClient()
    const body: CreateOrderRequest = await request.json()
    console.log('üìù –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(body, null, 2))
    
    const {
      userId,
      customerInfo,
      seats,
      generalAccess,
      totalPrice,
      totalTickets,
      paymentMethod
    } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const validationSchema = {
      userId: (value: any) => typeof value === 'string' && value.length > 0,
      'customerInfo.email': (value: any) => typeof customerInfo?.email === 'string' && /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(customerInfo.email),
      'customerInfo.firstName': (value: any) => typeof customerInfo?.firstName === 'string' && customerInfo.firstName.length > 0,
      'customerInfo.lastName': (value: any) => typeof customerInfo?.lastName === 'string' && customerInfo.lastName.length > 0
    }

    const validation = validateRequestData(body, validationSchema)
    if (!validation.isValid) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', validation.errors)
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', details: validation.errors },
        { status: 400 }
      )
    }
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ userId (–±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è)
    if (!userId || typeof userId !== 'string') {
      return NextResponse.json(
        { error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
        { status: 400 }
      )
    }

    // Sanitize customer info
    const sanitizedCustomerInfo = {
      firstName: sanitizeInput(customerInfo.firstName),
      lastName: sanitizeInput(customerInfo.lastName),
      email: sanitizeInput(customerInfo.email?.toLowerCase()),
      phone: customerInfo.phone ? sanitizeInput(customerInfo.phone) : undefined
    }

    let actualUserId = userId;
    
    // Check if user with this email already exists
    const { data: existingUsers, error: checkError } = await supabase
      .from('users')
      .select('id')
      .eq('email', sanitizedCustomerInfo.email)
      .limit(1);
    
    if (checkError) {
      console.error('Error checking existing user:', checkError);
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', details: checkError.message },
        { status: 500 }
      );
    }
    
    if (existingUsers && existingUsers.length > 0) {
      // User exists, use their ID and update their info
      actualUserId = existingUsers[0].id;
      
      const { error: updateError } = await supabase
        .from('users')
        .update({
          full_name: `${sanitizedCustomerInfo.firstName} ${sanitizedCustomerInfo.lastName}`,
          phone: sanitizedCustomerInfo.phone,
          is_temporary: true,
          temp_expires_at: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days from now
          updated_at: new Date().toISOString()
        })
        .eq('id', actualUserId);
      
      if (updateError) {
        console.error('Error updating existing user:', updateError);
        return NextResponse.json(
          { error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', details: updateError.message },
          { status: 500 }
        );
      }
      
      console.log('Updated existing user:', actualUserId);
    } else {
      // User doesn't exist, create new one
      const { error: insertError } = await supabase
        .from('users')
        .insert({
          id: userId,
          email: sanitizedCustomerInfo.email,
          full_name: `${sanitizedCustomerInfo.firstName} ${sanitizedCustomerInfo.lastName}`,
          phone: sanitizedCustomerInfo.phone,
          is_temporary: true,
          temp_expires_at: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString() // 2 days from now
        });
      
      if (insertError) {
        console.error('Error creating new user:', insertError);
        return NextResponse.json(
          { error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', details: insertError.message },
          { status: 500 }
        );
      }
      
      console.log('Created new user:', userId);
    }



    // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –æ–¥–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ)
    console.log('üîç –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è...')
    const { data: eventData, error: eventError } = await supabase
      .from('events')
      .select('id')
      .eq('status', 'active')
      .limit(1)
      .single()

    if (eventError || !eventData) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', eventError)
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑–µ...')
      const { data: allEvents } = await supabase.from('events').select('id, title, status')
      console.log('üìã –í—Å–µ —Å–æ–±—ã—Ç–∏—è:', allEvents)
      return NextResponse.json(
        { error: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' },
        { status: 500 }
      )
    }
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:', eventData.id)

    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const { data: orderData, error: orderError } = await supabase
      .from('orders')
      .insert({
        id: crypto.randomUUID(),
        user_id: actualUserId,
        customer_email: sanitizedCustomerInfo.email,
        customer_first_name: sanitizedCustomerInfo.firstName,
        customer_last_name: sanitizedCustomerInfo.lastName,
        customer_phone: sanitizedCustomerInfo.phone,
        total_price: totalPrice,
        total_tickets: totalTickets,
        payment_method: paymentMethod,
        status: 'pending',
        created_at: new Date().toISOString()
      })
      .select('id')
      .single()

    if (orderError) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', orderError)
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞' },
        { status: 500 }
      )
    }

    const orderId = orderData.id

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥ –∏ PDF URL –¥–ª—è –∑–∞–∫–∞–∑–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
    const orderNumber = `VOEV-ORDER-${Math.floor(Math.random() * 999999).toString().padStart(6, '0')}`;
    const timestamp = Date.now() / 1000;
    const checksum = require('crypto').createHash('md5').update(`${orderId}${orderNumber}${timestamp}`).digest('hex');
    
    const qrCode = JSON.stringify({
      order_id: orderId,
      order_number: orderNumber,
      timestamp: timestamp,
      checksum: checksum
    });
    const pdfUrl = `/api/tickets/pdf?orderId=${orderId}`
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å QR –∫–æ–¥–æ–º –∏ PDF URL
    const { error: updateError } = await supabase
      .from('orders')
      .update({ 
        qr_code: qrCode,
        pdf_url: pdfUrl,
        updated_at: new Date().toISOString()
      })
      .eq('id', orderId)

    if (updateError) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è QR –∫–æ–¥–∞ –∏ PDF URL:', updateError)
    } else {
      console.log('QR –∫–æ–¥ –∏ PDF URL —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:', orderId)
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–∞ –≤ –∑–∞–∫–∞–∑–µ
    if (seats.length > 0) {
      const orderSeats = []
      
      // –ü–æ–ª—É—á–∞–µ–º UUID –º–µ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ zone, row, number
      for (const seat of seats) {
        // –ü–∞—Ä—Å–∏–º —Å–æ—Å—Ç–∞–≤–Ω–æ–π ID –º–µ—Å—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: zone-row-number)
        const [zone, row, number] = seat.id.split('-')
        
        const { data: seatData, error: seatError } = await supabase
          .from('seats')
          .select('id')
          .eq('zone', zone)
          .eq('row', row)
          .eq('number', number)
          .single()
        
        if (seatError || !seatData) {
          console.error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–∞ ${zone}-${row}-${number}:`, seatError)
          // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
          await supabase.from('orders').delete().eq('id', orderId)
          return NextResponse.json(
            { error: `–ú–µ—Å—Ç–æ ${zone}-${row}-${number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ` },
            { status: 500 }
          )
        }
        
        orderSeats.push({
          id: crypto.randomUUID(),
          order_id: orderId,
          seat_id: seatData.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º UUID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          price: seat.price,
          event_id: eventData.id
        })
      }

      const { error: seatsError } = await supabase
        .from('order_seats')
        .insert(orderSeats)

      if (seatsError) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Å—Ç:', seatsError)
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
        await supabase.from('orders').delete().eq('id', orderId)
        return NextResponse.json(
          { error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Å—Ç' },
          { status: 500 }
        )
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º general access –±–∏–ª–µ—Ç—ã
    if (generalAccess.length > 0) {
      const orderGeneralAccess = generalAccess.map(ticket => ({
        id: crypto.randomUUID(),
        order_id: orderId,
        ticket_name: ticket.name,
        price: ticket.price,
        quantity: ticket.quantity,
        event_id: eventData.id
      }))

      const { error: generalError } = await supabase
        .from('order_general_access')
        .insert(orderGeneralAccess)

      if (generalError) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è general access:', generalError)
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
        await supabase.from('orders').delete().eq('id', orderId)
        return NextResponse.json(
          { error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤' },
          { status: 500 }
        )
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–µ—Å—Ç –Ω–∞ "sold" (–µ—Å–ª–∏ —ç—Ç–æ –º–µ—Å—Ç–∞)
    if (seats.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –º–µ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ zone, row, number
      for (const seat of seats) {
        // –ü–∞—Ä—Å–∏–º —Å–æ—Å—Ç–∞–≤–Ω–æ–π ID –º–µ—Å—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: zone-row-number)
        const [zone, row, number] = seat.id.split('-')
        
        const { error: updateError } = await supabase
          .from('seats')
          .update({ 
            status: 'sold', 
            reserved_by: actualUserId,
            expires_at: null,
            updated_at: new Date().toISOString() 
          })
          .eq('zone', zone)
          .eq('row', row)
          .eq('number', number)

        if (updateError) {
          console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Å—Ç–∞ ${seat.id}:`, updateError)
          // –ù–µ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        }
      }
    }

    // –°–æ–∑–¥–∞–µ–º –±–∏–ª–µ—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞
    const { error: ticketsError } = await supabase.rpc('create_tickets_from_order', {
      order_uuid: orderId
    })

    if (ticketsError) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤:', ticketsError)
      // –ù–µ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑, –±–∏–ª–µ—Ç—ã –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–∑–∂–µ
    } else {
      console.log('–ë–∏–ª–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:', orderId)
    }

    return NextResponse.json(
      {
        success: true,
        orderId: orderId,
        orderNumber: orderNumber,
        message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
      },
      { status: 201 }
    )

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error)
    console.error('‚ùå Stack trace:', error instanceof Error ? error.stack : 'No stack trace')
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    )
  }
})

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const GET = withPublicAccess(async (request: NextRequest) => {
  try {
    const supabase = createSupabaseServerClient()
    const { searchParams } = new URL(request.url)
    const userId = searchParams.get('userId')

    if (!userId) {
      return NextResponse.json(
        { error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
        { status: 400 }
      )
    }

    // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ userId
    if (!userId || typeof userId !== 'string') {
      return NextResponse.json(
        { error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
        { status: 400 }
      )
    }

    const { data: orders, error } = await supabase
      .from('orders')
      .select(`
        *,
        order_seats(*),
        order_general_access(*)
      `)
      .eq('user_id', userId)
      .order('created_at', { ascending: false })

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error)
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤' },
        { status: 500 }
      )
    }

    return NextResponse.json({ orders })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
})