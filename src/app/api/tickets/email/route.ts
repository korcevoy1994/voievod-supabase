import { NextRequest, NextResponse } from 'next/server'
import nodemailer from 'nodemailer'
import { jsPDF } from 'jspdf'
import QRCode from 'qrcode'
import path from 'path'
import { createSupabaseServerClient } from '@/lib/supabase-server'

interface Order {
  id: string;
  customer_first_name: string;
  customer_last_name: string;
  customer_email: string;
  customer_phone?: string;
  total_price: number;
  total_tickets: number;
  payment_method: string;
  status: string;
  created_at: string;
  order_seats: Array<{
    seat_id: string;
    zone: string;
    row: string;
    number: string;
    price: number;
  }>;
  order_general_access: Array<{
    id: string;
    name: string;
    price: number;
    quantity: number;
  }>;
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –¥–ª—è –æ–¥–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞
const generateSingleTicketPDF = async (order: Order, ticketInfo: any, ticketIndex: number): Promise<Buffer> => {
  try {
    // –°–æ–∑–¥–∞–µ–º PDF —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –±–∏–ª–µ—Ç–∞ (666.75x1200px –≤ –ø—É–Ω–∫—Ç–∞—Ö)
    // 1 –ø—É–Ω–∫—Ç = 1/72 –¥—é–π–º–∞, –ø–æ—ç—Ç–æ–º—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–∏–∫—Å–µ–ª–∏ –≤ –ø—É–Ω–∫—Ç—ã
    const widthPt = (666.75 * 72) / 96; // ~500pt
    const heightPt = (1200 * 72) / 96; // ~900pt
    
    const doc = new jsPDF({
       orientation: 'portrait',
       unit: 'pt',
       format: [widthPt, heightPt],
       compress: true
     });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞ –∏–∑ –ø–∞–ø–∫–∏ public
     const ticketImagePath = path.join(process.cwd(), 'public', 'ticket.jpg');
     
     try {
       const fs = await import('fs');
       const ticketImageBuffer = fs.readFileSync(ticketImagePath);
       const ticketImageBase64 = ticketImageBuffer.toString('base64');
       
       // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–æ–º–ø—Ä–µ—Å—Å–∏–µ–π
        doc.addImage(
          `data:image/jpeg;base64,${ticketImageBase64}`,
          'JPEG',
          0, 0,
          widthPt, heightPt,
          undefined, // alias
          'MEDIUM' // compression
        );
     } catch (bgError) {
       console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω:', bgError);
       // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ–Ω, —Ä–∏—Å—É–µ–º –±–µ–ª—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
       doc.setFillColor(255, 255, 255);
       doc.rect(0, 0, widthPt, heightPt, 'F');
     }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π QR –∫–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∏–ª–µ—Ç–∞
     const qrData = `ORDER:${order.id}:TICKET:${ticketIndex}:${Date.now()}`;
     const qrCodeDataURL = await QRCode.toDataURL(qrData, {
       width: 300,
       margin: 1,
       color: {
         dark: '#000000',
         light: '#FFFFFF'
       }
     });
    
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã QR –∫–æ–¥–∞: —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ x, y 635.5, —Ä–∞–∑–º–µ—Ä 230x230px
     const qrSize = (230 * 72) / 96;
     const qrX = (widthPt - qrSize) / 2; // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
     const qrY = 472;
    
    doc.addImage(qrCodeDataURL, 'PNG', qrX, qrY, qrSize, qrSize);
    
    // –û–±–ª–∞—Å—Ç—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–µ—Ç–µ: x 0 y 955.15, —Ä–∞–∑–º–µ—Ä 666.75x244.85px
    const infoX = 0;
    const infoY = (955.15 * 72) / 96;
    const infoWidth = (666.75 * 72) / 96;
    const infoHeight = (244.85 * 72) / 96;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–µ—Ç–µ
    doc.setTextColor(255, 255, 255);
    
    const centerX = infoX + (infoWidth / 2);
    let textY = infoY + (infoHeight / 2) - 10; // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –±–∏–ª–µ—Ç–µ
    doc.setFontSize(24);
    doc.setFont('helvetica', 'bold');
    
    if (ticketInfo.type === 'seat') {
      const seatText = `ZONA: ${ticketInfo.zone}  ‚Ä¢  R√ÇNDUL: ${ticketInfo.row}  ‚Ä¢  LOC: ${ticketInfo.number}`;
      doc.text(seatText, centerX, textY, { align: 'center' });
    } else if (ticketInfo.type === 'general') {
      doc.text(ticketInfo.name, centerX, textY, { align: 'center' });
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º PDF –∫–∞–∫ Buffer
    const pdfOutput = doc.output('arraybuffer');
    return Buffer.from(pdfOutput);
  } catch (error) {
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö PDF –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞
const generateAllTicketPDFs = async (order: Order): Promise<Array<{buffer: Buffer, filename: string}>> => {
  const tickets = [];
  let ticketIndex = 1;
  const baseTimestamp = Date.now();
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—Ç–∞
  if (order.order_seats && order.order_seats.length > 0) {
    for (const seat of order.order_seats) {
      const ticketInfo = {
        type: 'seat',
        zone: seat.zone,
        row: seat.row,
        number: seat.number,
        price: seat.price
      };
      
      const pdfBuffer = await generateSingleTicketPDF(order, ticketInfo, ticketIndex);
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ timestamp
      const uniqueTimestamp = baseTimestamp + ticketIndex;
      tickets.push({
        buffer: pdfBuffer,
        filename: `bilet-${ticketIndex}-zona-${seat.zone}-rand-${seat.row}-loc-${seat.number}-${uniqueTimestamp}.pdf`
      });
      ticketIndex++;
    }
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∏–ª–µ—Ç–∞ –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  if (order.order_general_access && order.order_general_access.length > 0) {
    for (const ga of order.order_general_access) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π PDF –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∏–ª–µ—Ç–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
      for (let i = 0; i < ga.quantity; i++) {
        const ticketInfo = {
          type: 'general',
          name: ga.name,
          price: ga.price
        };
        
        const pdfBuffer = await generateSingleTicketPDF(order, ticketInfo, ticketIndex);
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ timestamp
        const uniqueTimestamp = baseTimestamp + ticketIndex;
        tickets.push({
          buffer: pdfBuffer,
          filename: `bilet-${ticketIndex}-${ga.name.replace(/\s+/g, '-').toLowerCase()}-${uniqueTimestamp}.pdf`
        });
        ticketIndex++;
      }
    }
  }
  
  return tickets;
}

export async function POST(request: NextRequest) {
  try {
    const supabase = createSupabaseServerClient();
    const { orderId } = await request.json()
    
    if (!orderId) {
      return NextResponse.json(
        { error: 'Order ID is required' },
        { status: 400 }
      )
    }
    
    console.log('üìß –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –±–∏–ª–µ—Ç–∞ –ø–æ email –¥–ª—è –∑–∞–∫–∞–∑–∞:', orderId)
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    const { data: order, error: orderError } = await supabase
      .from('orders')
      .select(`
        *,
        order_seats(*),
        order_general_access(*)
      `)
      .eq('id', orderId)
      .single()
    
    if (orderError || !order) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', orderError)
      return NextResponse.json(
        { error: 'Order not found' },
        { status: 404 }
      )
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ PDF –±–∏–ª–µ—Ç—ã
    const ticketPDFs = await generateAllTicketPDFs(order)
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: parseInt(process.env.SMTP_PORT || '465'),
      secure: process.env.SMTP_SECURE === 'true',
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS
      }
    })
    
    // –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∏–ª–µ—Ç–∞
    const attachments = ticketPDFs.map(ticket => ({
      filename: ticket.filename,
      content: ticket.buffer,
      contentType: 'application/pdf'
    }))
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å PDF –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
    const mailOptions = {
      from: `"${process.env.EMAIL_FROM_NAME}" <${process.env.EMAIL_FROM_ADDRESS}>`,
      to: order.customer_email,
      subject: `Biletele tale VOEVODA - Comanda #${orderId.slice(0, 8)}`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h1 style="color: #1f2937; text-align: center;">VOEVODA</h1>
          <h2 style="color: #374151;">Mul»õumim pentru cumpƒÉrare!</h2>
          
          <p>BunƒÉ ${order.customer_first_name},</p>
          
          <p>Biletele tale pentru evenimentul VOEVODA sunt ata»ôate la acest email. Fiecare bilet este √Æntr-un fi»ôier PDF separat.</p>
          
          <div style="background-color: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="margin-top: 0; color: #374151;">Detalii comandƒÉ:</h3>
            <p><strong>NumƒÉrul comenzii:</strong> ${orderId}</p>
            <p><strong>Data evenimentului:</strong> 15 Februarie 2025, 19:00</p>
            <p><strong>Loca»õia:</strong> Sala PolivalentƒÉ, Chi»ôinƒÉu</p>
            <p><strong>Total bilete:</strong> ${order.total_tickets}</p>
            <p><strong>Total plƒÉtit:</strong> ${order.total_price} Lei</p>
            <p><strong>Fi»ôiere ata»ôate:</strong> ${ticketPDFs.length} bilete PDF</p>
          </div>
          
          <p><strong>Instruc»õiuni importante:</strong></p>
          <ul>
            <li>Fiecare bilet este √Æntr-un fi»ôier PDF separat</li>
            <li>PrezintƒÉ fiecare bilet PDF la intrare (pe telefon sau printat)</li>
            <li>QR codul de pe fiecare bilet va fi scanat la intrare</li>
            <li>PƒÉstreazƒÉ acest email pentru referin»õe viitoare</li>
          </ul>
          
          <p>Ne vedem la eveniment!</p>
          
          <p style="color: #6b7280; font-size: 14px; margin-top: 30px;">
            Echipa ${process.env.EMAIL_FROM_NAME}<br>
            Pentru √ÆntrebƒÉri: ${process.env.EMAIL_SUPPORT}
          </p>
        </div>
      `,
      attachments: attachments
    }
    
    const info = await transporter.sendMail(mailOptions)
    
    console.log('‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:', info.messageId)
    console.log('üìß Preview URL:', nodemailer.getTestMessageUrl(info))
    
    return NextResponse.json({
      success: true,
      message: 'Email sent successfully',
      messageId: info.messageId,
      previewUrl: nodemailer.getTestMessageUrl(info)
    })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error)
    return NextResponse.json(
      { error: 'Failed to send email' },
      { status: 500 }
    )
  }
}