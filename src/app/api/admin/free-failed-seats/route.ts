import { NextRequest, NextResponse } from 'next/server'
import { createSupabaseServerClient } from '@/lib/supabase-server'

export async function POST(request: NextRequest) {
  console.log('üî• POST /api/admin/free-failed-seats called')
  try {
    const supabase = createSupabaseServerClient()
    
    // –ù–∞–π—Ç–∏ –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å failed –ø–ª–∞—Ç–µ–∂–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
    const { data: ordersWithFailedPayments, error: ordersError } = await supabase
      .from('orders')
      .select(`
        id,
        status,
        order_payments(status),
        order_seats(id, seat_id),
        order_general_access(id)
      `)
      .eq('order_payments.status', 'failed')
    
    if (ordersError) {
      console.error('Error fetching orders with failed payments:', ordersError)
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤ —Å –Ω–µ—É–¥–∞—á–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏' },
        { status: 500 }
      )
    }

    console.log('Found orders with failed payments:', ordersWithFailedPayments?.length || 0)
    console.log('Orders data:', JSON.stringify(ordersWithFailedPayments, null, 2))

    if (!ordersWithFailedPayments || ordersWithFailedPayments.length === 0) {
      return NextResponse.json({
        message: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç —Å –Ω–µ—É–¥–∞—á–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏',
        freedSeats: 0,
        processedOrders: []
      })
    }

    let totalFreedSeats = 0
    const processedOrders = []

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑
    for (const order of ordersWithFailedPayments) {
      let freedSeatsForOrder = 0
      
      // –û—Å–≤–æ–±–æ–¥–∏—Ç—å –æ–±—ã—á–Ω—ã–µ –º–µ—Å—Ç–∞
      if (order.order_seats && order.order_seats.length > 0) {
        const seatIds = order.order_seats.map((seat: any) => seat.seat_id)
        
        if (seatIds.length > 0) {
          // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ—Å—Ç–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending_payment, reserved –∏–ª–∏ sold
          const { data: updatedSeats, error: seatsUpdateError } = await supabase
            .from('seats')
            .update({ status: 'available', reserved_by: null, expires_at: null })
            .in('id', seatIds)
            .in('status', ['pending_payment', 'reserved', 'sold'])
            .select('id')
          
          if (!seatsUpdateError && updatedSeats) {
            freedSeatsForOrder += updatedSeats.length
          }
        }
      }
      
      // General access –±–∏–ª–µ—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç
      // —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
      
      if (freedSeatsForOrder > 0) {
        totalFreedSeats += freedSeatsForOrder
        processedOrders.push({
          orderId: order.id,
          freedSeats: freedSeatsForOrder
        })
      }
    }

    return NextResponse.json({
      message: `–£—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ ${totalFreedSeats} –º–µ—Å—Ç –∏–∑ ${processedOrders.length} –∑–∞–∫–∞–∑–æ–≤`,
      freedSeats: totalFreedSeats,
      processedOrders
    })
    
  } catch (error) {
    console.error('Error freeing failed seats:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}

// GET endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç —Å failed –ø–ª–∞—Ç–µ–∂–∞–º–∏
export async function GET(request: NextRequest) {
  try {
    const supabase = createSupabaseServerClient()
    
    // –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç —Å failed –ø–ª–∞—Ç–µ–∂–∞–º–∏
    const { data: ordersWithFailedPayments, error: ordersError } = await supabase
      .from('orders')
      .select(`
        id,
        status,
        order_payments(status),
        order_seats(id, seat_id),
        order_general_access(id)
      `)
      .eq('order_payments.status', 'failed')
    
    if (ordersError) {
      console.error('Error fetching orders with failed payments:', ordersError)
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤ —Å –Ω–µ—É–¥–∞—á–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏' },
        { status: 500 }
      )
    }

    let totalBlockedSeats = 0
    const ordersInfo = []

    if (ordersWithFailedPayments) {
      for (const order of ordersWithFailedPayments) {
        let blockedSeatsForOrder = 0
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –º–µ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if (order.order_seats && order.order_seats.length > 0) {
          const seatIds = order.order_seats.map(seat => seat.seat_id)
          
          const { data: actualSeats, error: seatsError } = await supabase
             .from('seats')
             .select('id, status')
             .in('id', seatIds)
             .in('status', ['pending_payment', 'reserved', 'sold']) // –°—á–∏—Ç–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
          
          if (!seatsError && actualSeats) {
            blockedSeatsForOrder = actualSeats.length
          }
        }
        
        // General access –±–∏–ª–µ—Ç—ã –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—Ç –º–µ—Å—Ç–∞
        // —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
        
        if (blockedSeatsForOrder > 0) {
          totalBlockedSeats += blockedSeatsForOrder
          ordersInfo.push({
            orderId: order.id,
            blockedSeats: blockedSeatsForOrder
          })
        }
      }
    }

    return NextResponse.json({
      totalBlockedSeats,
      ordersCount: ordersInfo.length,
      orders: ordersInfo
    })
    
  } catch (error) {
    console.error('Error checking failed seats:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}