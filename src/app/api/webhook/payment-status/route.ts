import { NextRequest, NextResponse } from 'next/server';
import { autoFreeSeatOnFailedPayment } from '@/lib/seat-auto-free';

/**
 * Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –º–µ—Å—Ç–∞ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    console.log('üîî –ü–æ–ª—É—á–µ–Ω webhook –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', {
      orderId: body.order_id,
      paymentId: body.payment_id,
      status: body.status,
      timestamp: new Date().toISOString()
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!body.order_id || !body.status) {
      return NextResponse.json(
        { error: 'Missing required fields: order_id, status' },
        { status: 400 }
      );
    }

    // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ—É–¥–∞—á–Ω—ã–π, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ—Å—Ç–∞
    if (body.status === 'failed') {
      console.log(`üí≥ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ—É–¥–∞—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${body.order_id}`);
      
      const result = await autoFreeSeatOnFailedPayment(body.order_id, body.status);
      
      if (result.success) {
        console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –º–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${body.order_id}`);
        
        return NextResponse.json({
          success: true,
          message: 'Payment status processed and seats auto-freed if needed',
          orderId: body.order_id,
          paymentStatus: body.status,
          seatFreeingResult: result
        });
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ ${body.order_id}:`, result.error);
        
        return NextResponse.json({
          success: false,
          message: 'Payment status processed but seat freeing failed',
          orderId: body.order_id,
          paymentStatus: body.status,
          error: result.error
        }, { status: 500 });
      }
    }

    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    console.log(`‚ÑπÔ∏è  –ü–ª–∞—Ç–µ–∂ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${body.order_id} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å ${body.status} - –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
    
    return NextResponse.json({
      success: true,
      message: 'Payment status processed',
      orderId: body.order_id,
      paymentStatus: body.status
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ webhook –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

/**
 * GET endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook
 */
export async function GET() {
  return NextResponse.json({
    message: 'Payment status webhook endpoint is active',
    timestamp: new Date().toISOString(),
    endpoints: {
      POST: '/api/webhook/payment-status - Process payment status changes',
    }
  });
}