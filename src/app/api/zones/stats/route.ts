import { NextRequest, NextResponse } from 'next/server'
import { createSupabaseServerClient } from '@/lib/supabase-server'
import { createErrorResponse, createSuccessResponse, withErrorHandling } from '@/lib/apiResponse'

// –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 2 –º–∏–Ω—É—Ç—ã –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
export const revalidate = 120

// –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
const cache = new Map<string, { data: any; timestamp: number }>()
const CACHE_TTL = 2 * 60 * 1000 // 2 –º–∏–Ω—É—Ç—ã

export const GET = withErrorHandling(async (request: NextRequest) => {
  const supabase = createSupabaseServerClient()
  const { searchParams } = new URL(request.url)
  const eventId = searchParams.get('eventId') || '550e8400-e29b-41d4-a716-446655440000'

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
  const cacheKey = `zone-stats-${eventId}`
  const cached = cache.get(cacheKey)
  const now = Date.now()
  
  if (cached && (now - cached.timestamp) < CACHE_TTL) {
    return createSuccessResponse(cached.data)
  }

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î
  const { data: seatsData, error: seatsError } = await supabase
    .from('seats')
    .select('zone, status')
    .eq('event_id', eventId)

  if (seatsError) {
    return createErrorResponse('Failed to fetch zone statistics', 500, 'GET /api/zones/stats')
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–æ–Ω–∞–º
  const stats: Record<string, {
    total: number
    available: number
    sold: number
    unavailable: number
    blocked: number
    free: number
  }> = {}

  seatsData?.forEach(seat => {
    const zone = seat.zone
    if (!stats[zone]) {
      stats[zone] = {
        total: 0,
        available: 0,
        sold: 0,
        unavailable: 0,
        blocked: 0,
        free: 0
      }
    }

    stats[zone].total++
    
    // –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –º–µ—Å—Ç
    switch (seat.status) {
      case 'blocked':
        stats[zone].blocked++
        break
      case 'unavailable':
        stats[zone].unavailable++
        break
      case 'sold':
        stats[zone].sold++
        break
      case 'reserved':
      case 'pending_payment':
        stats[zone].unavailable++
        break
      default:
        stats[zone].available++
    }
  })

  // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã
  Object.keys(stats).forEach(zone => {
    const zoneData = stats[zone]
    zoneData.free = zoneData.total - zoneData.sold - zoneData.unavailable - zoneData.blocked
  })

  // Debug –¥–ª—è –∑–æ–Ω—ã 207
  if (stats['207']) {
    console.log('üèüÔ∏è Zone 207 stats from API:', {
      zone207: stats['207'],
      totalZones: Object.keys(stats).length,
      allZoneIds: Object.keys(stats).slice(0, 10) // –ü–µ—Ä–≤—ã–µ 10 –∑–æ–Ω
    })
  } else {
    console.log('‚ö†Ô∏è Zone 207 not found in stats. Available zones:', Object.keys(stats).slice(0, 10))
  }

  const result = { 
    eventId,
    zones: stats
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
  cache.set(cacheKey, { data: result, timestamp: now })
  
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–µ—à–∞
  if (cache.size > 100) {
    const entries = Array.from(cache.entries())
    entries.sort((a, b) => a[1].timestamp - b[1].timestamp)
    const toDelete = entries.slice(0, 50)
    toDelete.forEach(([key]) => cache.delete(key))
  }

  return createSuccessResponse(result)
}, 'GET /api/zones/stats')