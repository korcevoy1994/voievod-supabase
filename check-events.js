require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase credentials');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkEvents() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
    const { data: allEvents, error: allError } = await supabase
      .from('events')
      .select('*');
    
    if (allError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π:', allError);
      return;
    }
    
    console.log('üìã –í—Å–µ —Å–æ–±—ã—Ç–∏—è:', allEvents);
    
    if (!allEvents || allEvents.length === 0) {
      console.log('‚ö†Ô∏è –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ...');
      
      const { data: newEvent, error: createError } = await supabase
        .from('events')
        .insert({
          id: '550e8400-e29b-41d4-a716-446655440000',
          title: 'Test Event',
          description: 'Test event for order creation',
          event_date: new Date().toISOString(),
          venue: 'Test Venue',
          status: 'active',
          created_at: new Date().toISOString()
        })
        .select()
        .single();
      
      if (createError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:', createError);
      } else {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', newEvent);
      }
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
      const activeEvents = allEvents.filter(event => event.status === 'active');
      console.log('üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', activeEvents);
      
      if (activeEvents.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ...');
        
        const { data: updatedEvent, error: updateError } = await supabase
          .from('events')
          .update({ status: 'active' })
          .eq('id', allEvents[0].id)
          .select()
          .single();
        
        if (updateError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è:', updateError);
        } else {
          console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ:', updatedEvent);
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkEvents();