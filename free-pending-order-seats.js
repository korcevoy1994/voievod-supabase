require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('Missing Supabase environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function freePendingOrderSeats() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ —Å pending —Å—Ç–∞—Ç—É—Å–æ–º –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏...');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending'
    const { data: pendingOrders, error: ordersError } = await supabase
      .from('orders')
      .select('id')
      .eq('status', 'pending');
    
    if (ordersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending –∑–∞–∫–∞–∑–æ–≤:', ordersError);
      return;
    }
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${pendingOrders.length} –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending'`);
    
    let totalFreedSeats = 0;
    
    for (const order of pendingOrders) {
      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
      const { data: orderSeats, error: seatsError } = await supabase
        .from('order_seats')
        .select('seat_id')
        .eq('order_id', order.id);
      
      if (seatsError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.id}:`, seatsError);
        continue;
      }
      
      if (orderSeats && orderSeats.length > 0) {
        const seatIds = orderSeats.map(os => os.seat_id);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∏–∑ —ç—Ç–∏—Ö –º–µ—Å—Ç –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å 'sold'
        const { data: soldSeats, error: soldSeatsError } = await supabase
          .from('seats')
          .select('id, status')
          .in('id', seatIds)
          .eq('status', 'sold');
        
        if (soldSeatsError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Å—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.id}:`, soldSeatsError);
          continue;
        }
        
        if (soldSeats && soldSeats.length > 0) {
          console.log(`üé´ –ó–∞–∫–∞–∑ ${order.id}: –Ω–∞–π–¥–µ–Ω–æ ${soldSeats.length} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç`);
          
          // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ—Å—Ç–∞
          const { error: updateError } = await supabase
            .from('seats')
            .update({ 
              status: 'available',
              updated_at: new Date().toISOString() 
            })
            .in('id', soldSeats.map(s => s.id));
          
          if (updateError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.id}:`, updateError);
          } else {
            console.log(`‚úÖ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ ${soldSeats.length} –º–µ—Å—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.id}`);
            totalFreedSeats += soldSeats.length;
          }
        }
      }
    }
    
    console.log(`\nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å–µ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç: ${totalFreedSeats}`);
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

freePendingOrderSeats();