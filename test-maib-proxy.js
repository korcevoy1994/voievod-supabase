const { HttpsProxyAgent } = require('https-proxy-agent');
const https = require('https');

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const fixieUrl = process.env.FIXIE_URL;
const maibProjectId = process.env.MAIB_PROJECT_ID;
const maibProjectSecret = process.env.MAIB_PROJECT_SECRET;

if (!fixieUrl) {
  console.error('‚ùå FIXIE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

if (!maibProjectId || !maibProjectSecret) {
  console.error('‚ùå MAIB —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  process.exit(1);
}

console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MAIB API —á–µ—Ä–µ–∑ Fixie –ø—Ä–æ–∫—Å–∏...');
console.log('üì° –ü—Ä–æ–∫—Å–∏ URL:', fixieUrl.replace(/\/\/([^:]+):([^@]+)@/, '//***:***@'));

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∞–≥–µ–Ω—Ç
const agent = new HttpsProxyAgent(fixieUrl);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MAIB API
function testMaibApi(useProxy = false) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify({
      projectId: maibProjectId,
      projectSecret: maibProjectSecret
    });

    const options = {
      hostname: 'maib.ecommerce.md',
      port: 443,
      path: '/v1/generate-token',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      },
      agent: useProxy ? agent : undefined
    };

    const req = https.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          resolve({
            statusCode: res.statusCode,
            response: response
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            response: data
          });
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.setTimeout(15000, () => {
      req.destroy();
      reject(new Error('Timeout'));
    });

    req.write(postData);
    req.end();
  });
}

async function testMaibProxy() {
  try {
    console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MAIB API –±–µ–∑ –ø—Ä–æ–∫—Å–∏...');
    const directResult = await testMaibApi(false);
    console.log('üåê –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:');
    console.log('   –°—Ç–∞—Ç—É—Å:', directResult.statusCode);
    console.log('   –û—Ç–≤–µ—Ç:', JSON.stringify(directResult.response, null, 2));

    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MAIB API —á–µ—Ä–µ–∑ Fixie –ø—Ä–æ–∫—Å–∏...');
    const proxyResult = await testMaibApi(true);
    console.log('üîí –ß–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:');
    console.log('   –°—Ç–∞—Ç—É—Å:', proxyResult.statusCode);
    console.log('   –û—Ç–≤–µ—Ç:', JSON.stringify(proxyResult.response, null, 2));

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    if (directResult.statusCode === proxyResult.statusCode) {
      console.log('‚úÖ –û–±–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–µ—Ä–Ω—É–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥');
      
      if (directResult.statusCode === 200) {
        console.log('‚úÖ MAIB API —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Fixie –ø—Ä–æ–∫—Å–∏!');
      } else {
        console.log('‚ö†Ô∏è  –û–±–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–µ—Ä–Ω—É–ª–∏ –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      }
    } else {
      console.log('‚ùå –†–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ã - –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–∫—Å–∏');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ MAIB API:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testMaibProxy();