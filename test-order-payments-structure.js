const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

async function testOrderPaymentsStructure() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã order_payments...');
    
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
    
    if (!supabaseUrl || !supabaseKey) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
    }
    
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
    
    const minimalData = {
      order_id: '550e8400-e29b-41d4-a716-446655440000',
      amount: 100,
      payment_method: 'card',
      payment_provider: 'maib',
      status: 'pending'
    };
    
    const { data: minimal, error: minimalError } = await supabase
      .from('order_payments')
      .insert(minimalData)
      .select()
      .single();
    
    if (minimalError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏:', minimalError);
    } else {
      console.log('‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:');
      Object.keys(minimal).forEach(col => {
        console.log(`  - ${col}: ${typeof minimal[col]} = ${minimal[col]}`);
      });
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await supabase
        .from('order_payments')
        .delete()
        .eq('id', minimal.id);
      console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
    }
    
    // –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    console.log('\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏...');
    
    const fullData = {
      order_id: '550e8400-e29b-41d4-a716-446655440000',
      event_id: '550e8400-e29b-41d4-a716-446655440000',
      amount: 100,
      payment_method: 'card',
      payment_provider: 'maib',
      provider_payment_id: 'test-payment-id',
      status: 'pending',
      provider_data: {
        payUrl: 'https://test.com',
        transactionId: 'test-tx-id'
      }
    };
    
    const { data: full, error: fullError } = await supabase
      .from('order_payments')
      .insert(fullData)
      .select()
      .single();
    
    if (fullError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –∑–∞–ø–∏—Å–∏:', fullError);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—é
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏...');
      
      const fieldsToTest = [
        { name: 'event_id', value: '550e8400-e29b-41d4-a716-446655440000' },
        { name: 'provider_payment_id', value: 'test-payment-id' },
        { name: 'provider_data', value: { test: 'data' } }
      ];
      
      for (const field of fieldsToTest) {
        const testData = {
          ...minimalData,
          [field.name]: field.value
        };
        
        const { data: testResult, error: testError } = await supabase
          .from('order_payments')
          .insert(testData)
          .select()
          .single();
        
        if (testError) {
          console.log(`‚ùå ${field.name}: ${testError.message}`);
        } else {
          console.log(`‚úÖ ${field.name}: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
          // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
          await supabase
            .from('order_payments')
            .delete()
            .eq('id', testResult.id);
        }
      }
    } else {
      console.log('‚úÖ –ü–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log('üìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:');
      Object.keys(full).forEach(col => {
        console.log(`  - ${col}: ${typeof full[col]} = ${JSON.stringify(full[col])}`);
      });
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await supabase
        .from('order_payments')
        .delete()
        .eq('id', full.id);
      console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

testOrderPaymentsStructure();