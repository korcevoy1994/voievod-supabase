const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
require('dotenv').config({ path: '.env.local' });

async function applyOrderPaymentsFix() {
  try {
    console.log('üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è order_payments...');
    
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    
    if (!supabaseUrl || !supabaseServiceKey) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase (–Ω—É–∂–µ–Ω SERVICE_ROLE_KEY)');
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å–Ω—É—é —Ä–æ–ª—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è DDL –æ–ø–µ—Ä–∞—Ü–∏–π
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlContent = fs.readFileSync('./fix-order-payments-complete.sql', 'utf8');
    
    console.log('üìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL —á–µ—Ä–µ–∑ RPC —Ñ—É–Ω–∫—Ü–∏—é
    const { data, error } = await supabase.rpc('exec', {
      sql: sqlContent
    });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', error);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏...');
      
      const commands = [
        "ALTER TABLE order_payments ADD COLUMN IF NOT EXISTS event_id UUID;",
        "ALTER TABLE order_payments ADD COLUMN IF NOT EXISTS provider_payment_id VARCHAR(255);",
        "ALTER TABLE order_payments ADD COLUMN IF NOT EXISTS provider_data JSONB;",
        "ALTER TABLE order_payments ADD COLUMN IF NOT EXISTS currency VARCHAR(3) DEFAULT 'MDL';",
        "ALTER TABLE order_payments ADD COLUMN IF NOT EXISTS completed_at TIMESTAMP WITH TIME ZONE;",
        "CREATE INDEX IF NOT EXISTS idx_order_payments_order_id ON order_payments(order_id);",
        "CREATE INDEX IF NOT EXISTS idx_order_payments_event_id ON order_payments(event_id);",
        "CREATE INDEX IF NOT EXISTS idx_order_payments_provider_payment_id ON order_payments(provider_payment_id);"
      ];
      
      for (let i = 0; i < commands.length; i++) {
        const command = commands[i];
        console.log(`‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ${i + 1}: ${command.substring(0, 50)}...`);
        
        try {
          const { error: cmdError } = await supabase.rpc('exec', {
            sql: command
          });
          
          if (cmdError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, cmdError.message);
          } else {
            console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
          }
        } catch (cmdErr) {
          console.error(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, cmdErr.message);
        }
      }
    } else {
      console.log('‚úÖ SQL –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
    
    const testData = {
      order_id: '550e8400-e29b-41d4-a716-446655440000',
      event_id: '550e8400-e29b-41d4-a716-446655440000',
      amount: 100,
      payment_method: 'card',
      payment_provider: 'maib',
      provider_payment_id: 'test-payment-id',
      status: 'pending',
      provider_data: {
        payUrl: 'https://test.com',
        transactionId: 'test-tx-id'
      }
    };
    
    const { data: testResult, error: testError } = await supabase
      .from('order_payments')
      .insert(testData)
      .select()
      .single();
    
    if (testError) {
      console.error('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª:', testError);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:');
      Object.keys(testResult).forEach(col => {
        console.log(`  - ${col}`);
      });
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await supabase
        .from('order_payments')
        .delete()
        .eq('id', testResult.id);
      console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
    }
    
    console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error.message);
    process.exit(1);
  }
}

applyOrderPaymentsFix();